//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
public struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  public static func validate() throws {
    try intern.validate()
  }

  /// This `R.image` struct is generated, and contains static references to 5 images.
  public struct image {
    /// Image `gear_cloud`.
    public static let gear_cloud = Rswift.ImageResource(bundle: R.hostingBundle, name: "gear_cloud")
    /// Image `pause`.
    public static let pause = Rswift.ImageResource(bundle: R.hostingBundle, name: "pause")
    /// Image `play`.
    public static let play = Rswift.ImageResource(bundle: R.hostingBundle, name: "play")
    /// Image `twitter_logo`.
    public static let twitter_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "twitter_logo")
    /// Image `wat`.
    public static let wat = Rswift.ImageResource(bundle: R.hostingBundle, name: "wat")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gear_cloud", bundle: ..., traitCollection: ...)`
    public static func gear_cloud(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gear_cloud, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pause", bundle: ..., traitCollection: ...)`
    public static func pause(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pause, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "play", bundle: ..., traitCollection: ...)`
    public static func play(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.play, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "twitter_logo", bundle: ..., traitCollection: ...)`
    public static func twitter_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.twitter_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wat", bundle: ..., traitCollection: ...)`
    public static func wat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wat, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 6 nibs.
  public struct nib {
    /// Nib `AVVideoPlayerView`.
    public static let avVideoPlayerView = _R.nib._AVVideoPlayerView()
    /// Nib `DummyTestViewController`.
    public static let dummyTestViewController = _R.nib._DummyTestViewController()
    /// Nib `FilesizeButton`.
    public static let filesizeButton = _R.nib._FilesizeButton()
    /// Nib `TwitterDLViewController`.
    public static let twitterDLViewController = _R.nib._TwitterDLViewController()
    /// Nib `VideoControlsView`.
    public static let videoControlsView = _R.nib._VideoControlsView()
    /// Nib `VideoPlayerViewController`.
    public static let videoPlayerViewController = _R.nib._VideoPlayerViewController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AVVideoPlayerView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.avVideoPlayerView) instead")
    public static func avVideoPlayerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.avVideoPlayerView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DummyTestViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dummyTestViewController) instead")
    public static func dummyTestViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dummyTestViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FilesizeButton", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.filesizeButton) instead")
    public static func filesizeButton(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.filesizeButton)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TwitterDLViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.twitterDLViewController) instead")
    public static func twitterDLViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.twitterDLViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VideoControlsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoControlsView) instead")
    public static func videoControlsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoControlsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "VideoPlayerViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.videoPlayerViewController) instead")
    public static func videoPlayerViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.videoPlayerViewController)
    }
    #endif

    public static func avVideoPlayerView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.avVideoPlayerView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    public static func dummyTestViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.dummyTestViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    public static func filesizeButton(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.filesizeButton.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    public static func twitterDLViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.twitterDLViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    public static func videoControlsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.videoControlsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    public static func videoPlayerViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.videoPlayerViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

public struct _R: Rswift.Validatable {
  public static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  public struct nib: Rswift.Validatable {
    public static func validate() throws {
      try _VideoControlsView.validate()
    }

    public struct _AVVideoPlayerView: Rswift.NibResourceType {
      public let bundle = R.hostingBundle
      public let name = "AVVideoPlayerView"

      public func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    public struct _DummyTestViewController: Rswift.NibResourceType {
      public let bundle = R.hostingBundle
      public let name = "DummyTestViewController"

      public func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    public struct _FilesizeButton: Rswift.NibResourceType {
      public let bundle = R.hostingBundle
      public let name = "FilesizeButton"

      public func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      public func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    public struct _TwitterDLViewController: Rswift.NibResourceType {
      public let bundle = R.hostingBundle
      public let name = "TwitterDLViewController"

      public func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    public struct _VideoControlsView: Rswift.NibResourceType, Rswift.Validatable {
      public let bundle = R.hostingBundle
      public let name = "VideoControlsView"

      public func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      public func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      public func thirdView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[2] as? UIKit.UIView
      }

      public static func validate() throws {
        if UIKit.UIImage(named: "play", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'play' is used in nib 'VideoControlsView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    public struct _VideoPlayerViewController: Rswift.NibResourceType {
      public let bundle = R.hostingBundle
      public let name = "VideoPlayerViewController"

      public func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
